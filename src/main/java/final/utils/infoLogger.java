package tp_final.utils;

import soot.Immediate;
import soot.Local;
import soot.Unit;
import soot.Value;
import soot.grimp.NewInvokeExpr;
import soot.jimple.*;
import soot.shimple.PhiExpr;
import soot.shimple.PiExpr;
import soot.shimple.ShimpleExpr;
import java.util.*;

public class infoLogger {
    public static void loggExpType (Value value) {
        if (value instanceof AddExpr) System.out.println("---> Value instance of AddExpr");
        if (value instanceof AndExpr) System.out.println("---> Value instance of AndExpr");
        if (value instanceof AnyNewExpr) System.out.println("---> Value instance of AnyNewExpr");
        if (value instanceof ArrayRef) System.out.println("---> Value instance of ArrayRef");
        if (value instanceof BinopExpr) System.out.println("---> Value instance of BinopExpr");
        if (value instanceof CastExpr) System.out.println("---> Value instance of CastExpr");
        if (value instanceof CaughtExceptionRef) System.out.println("---> Value instance of CaughtExceptionRef");
        if (value instanceof CmpExpr) System.out.println("---> Value instance of CmpExpr");
        if (value instanceof CmpgExpr) System.out.println("---> Value instance of CmpgExpr");
        if (value instanceof CmplExpr) System.out.println("---> Value instance of CmplExpr");
        if (value instanceof ConcreteRef) System.out.println("---> Value instance of ConcreteRef");
        if (value instanceof ConditionExpr) System.out.println("---> Value instance of ConditionExpr");
        if (value instanceof DivExpr) System.out.println("---> Value instance of DivExpr");
        if (value instanceof DynamicInvokeExpr) System.out.println("---> Value instance of DynamicInvokeExpr");
        if (value instanceof EqExpr) System.out.println("---> Value instance of EqExpr");
        if (value instanceof Expr) System.out.println("---> Value instance of Expr");
        if (value instanceof FieldRef) System.out.println("---> Value instance of FieldRef");
        if (value instanceof GeExpr) System.out.println("---> Value instance of GeExpr");
        if (value instanceof GtExpr) System.out.println("---> Value instance of GtExpr");
        if (value instanceof IdentityRef) System.out.println("---> Value instance of IdentityRef");
        if (value instanceof Immediate) System.out.println("---> Value instance of Immediate");
        if (value instanceof InstanceFieldRef) System.out.println("---> Value instance of InstanceFieldRef");
        if (value instanceof InstanceInvokeExpr) System.out.println("---> Value instance of InstanceInvokeExpr");
        if (value instanceof InstanceOfExpr) System.out.println("---> Value instance of InstanceOfExpr");
        if (value instanceof InterfaceInvokeExpr) System.out.println("---> Value instance of InterfaceInvokeExpr");
        if (value instanceof InvokeExpr) System.out.println("---> Value instance of InvokeExpr");
        if (value instanceof LeExpr) System.out.println("---> Value instance of LeExpr");
        if (value instanceof LengthExpr) System.out.println("---> Value instance of LengthExpr");
        if (value instanceof Local) System.out.println("---> Value instance of Local");
        if (value instanceof LtExpr) System.out.println("---> Value instance of LtExpr");
        if (value instanceof MulExpr) System.out.println("---> Value instance of MulExpr");
        if (value instanceof NeExpr) System.out.println("---> Value instance of NeExpr");
        if (value instanceof NegExpr) System.out.println("---> Value instance of NegExpr");
        if (value instanceof NewArrayExpr) System.out.println("---> Value instance of NewArrayExpr");
        if (value instanceof NewExpr) System.out.println("---> Value instance of NewExpr");
        if (value instanceof NewInvokeExpr) System.out.println("---> Value instance of NewInvokeExpr");
        if (value instanceof NewMultiArrayExpr) System.out.println("---> Value instance of NewMultiArrayExpr");
        if (value instanceof OrExpr) System.out.println("---> Value instance of OrExpr");
        if (value instanceof PhiExpr) System.out.println("---> Value instance of PhiExpr");
        if (value instanceof PiExpr) System.out.println("---> Value instance of PiExpr");
        if (value instanceof Ref) System.out.println("---> Value instance of Ref");
        if (value instanceof RemExpr) System.out.println("---> Value instance of RemExpr");
        if (value instanceof ShimpleExpr) System.out.println("---> Value instance of ShimpleExpr");
        if (value instanceof ShlExpr) System.out.println("---> Value instance of ShlExpr");
        if (value instanceof ShrExpr) System.out.println("---> Value instance of ShrExpr");
        if (value instanceof SpecialInvokeExpr) System.out.println("---> Value instance of SpecialInvokeExpr");
        if (value instanceof StaticInvokeExpr) System.out.println("---> Value instance of StaticInvokeExpr");
        if (value instanceof SubExpr) System.out.println("---> Value instance of SubExpr");
        if (value instanceof UnopExpr) System.out.println("---> Value instance of UnopExpr");
        if (value instanceof UshrExpr) System.out.println("---> Value instance of UshrExpr");
        if (value instanceof VirtualInvokeExpr) System.out.println("---> Value instance of VirtualInvokeExpr");
        if (value instanceof XorExpr) System.out.println("---> Value instance of XorExpr");
    }

    public static void loggStmtType (Unit unit) {
        if (unit instanceof AssignStmt) System.out.println("---> Unit is instanceof AssignStmt");
        if (unit instanceof BreakpointStmt) System.out.println("---> Unit is instanceof BreakpointStmt");
        if (unit instanceof DefinitionStmt) System.out.println("---> Unit is instanceof DefinitionStmt");
        if (unit instanceof EnterMonitorStmt) System.out.println("---> Unit is instanceof EnterMonitorStmt");
        if (unit instanceof ExitMonitorStmt) System.out.println("---> Unit is instanceof ExitMonitorStmt");
        if (unit instanceof GotoStmt) System.out.println("---> Unit is instanceof GotoStmt");
        if (unit instanceof IdentityStmt) System.out.println("---> Unit is instanceof IdentityStmt");
        if (unit instanceof IfStmt) System.out.println("---> Unit is instanceof IfStmt");
        if (unit instanceof InvokeStmt) System.out.println("---> Unit is instanceof InvokeStmt");
        if (unit instanceof LookupSwitchStmt) System.out.println("---> Unit is instanceof LookupSwitchStmt");
        if (unit instanceof MonitorStmt) System.out.println("---> Unit is instanceof MonitorStmt");
        if (unit instanceof NopStmt) System.out.println("---> Unit is instanceof NopStmt");
        if (unit instanceof RetStmt) System.out.println("---> Unit is instanceof RetStmt");
        if (unit instanceof ReturnStmt) System.out.println("---> Unit is instanceof ReturnStmt");
        if (unit instanceof ReturnVoidStmt) System.out.println("---> Unit is instanceof ReturnVoidStmt");
        if (unit instanceof TableSwitchStmt) System.out.println("---> Unit is instanceof TableSwitchStmt");
        if (unit instanceof ThrowStmt) System.out.println("---> Unit is instanceof ThrowStmt");
    }

    public static List<String> stmtTypes (Unit unit) {
        List<String> list = new ArrayList<String> (); 
        if (unit instanceof AssignStmt) list.add("AssignStmt");
        if (unit instanceof BreakpointStmt) list.add("BreakpointStmt");
        if (unit instanceof DefinitionStmt) list.add("DefinitionStmt");
        if (unit instanceof EnterMonitorStmt) list.add("EnterMonitorStmt");
        if (unit instanceof ExitMonitorStmt) list.add("ExitMonitorStmt");
        if (unit instanceof GotoStmt) list.add("GotoStmt");
        if (unit instanceof IdentityStmt) list.add("IdentityStmt");
        if (unit instanceof IfStmt) list.add("IfStmt");
        if (unit instanceof InvokeStmt) list.add("InvokeStmt");
        if (unit instanceof LookupSwitchStmt) list.add("LookupSwitchStmt");
        if (unit instanceof MonitorStmt) list.add("MonitorStmt");
        if (unit instanceof NopStmt) list.add("NopStmt");
        if (unit instanceof RetStmt) list.add("RetStmt");
        if (unit instanceof ReturnStmt) list.add("ReturnStmt");
        if (unit instanceof ReturnVoidStmt) list.add("ReturnVoidStmt");
        if (unit instanceof TableSwitchStmt) list.add("TableSwitchStmt");
        if (unit instanceof ThrowStmt) list.add("ThrowStmt");
        return list;
    }

    public static List<String> expTypes (Value value) {
        List<String> list = new ArrayList<String> (); 
        if (value instanceof AddExpr) list.add("AddExpr");
        if (value instanceof AndExpr) list.add("AndExpr");
        if (value instanceof AnyNewExpr) list.add("AnyNewExpr");
        if (value instanceof ArrayRef) list.add("ArrayRef");
        if (value instanceof BinopExpr) list.add("BinopExpr");
        if (value instanceof CastExpr) list.add("CastExpr");
        if (value instanceof CaughtExceptionRef) list.add("CaughtExceptionRef");
        if (value instanceof CmpExpr) list.add("CmpExpr");
        if (value instanceof CmpgExpr) list.add("CmpgExpr");
        if (value instanceof CmplExpr) list.add("CmplExpr");
        if (value instanceof ConcreteRef) list.add("ConcreteRef");
        if (value instanceof ConditionExpr) list.add("ConditionExpr");
        if (value instanceof DivExpr) list.add("DivExpr");
        if (value instanceof DynamicInvokeExpr) list.add("DynamicInvokeExpr");
        if (value instanceof EqExpr) list.add("EqExpr");
        if (value instanceof Expr) list.add("Expr");
        if (value instanceof FieldRef) list.add("FieldRef");
        if (value instanceof GeExpr) list.add("GeExpr");
        if (value instanceof GtExpr) list.add("GtExpr");
        if (value instanceof IdentityRef) list.add("IdentityRef");
        if (value instanceof Immediate) list.add("Immediate");
        if (value instanceof InstanceFieldRef) list.add("InstanceFieldRef");
        if (value instanceof InstanceInvokeExpr) list.add("InstanceInvokeExpr");
        if (value instanceof InstanceOfExpr) list.add("InstanceOfExpr");
        if (value instanceof InterfaceInvokeExpr) list.add("InterfaceInvokeExpr");
        if (value instanceof InvokeExpr) list.add("InvokeExpr");
        if (value instanceof LeExpr) list.add("LeExpr");
        if (value instanceof LengthExpr) list.add("LengthExpr");
        if (value instanceof Local) list.add("Local");
        if (value instanceof LtExpr) list.add("LtExpr");
        if (value instanceof MulExpr) list.add("MulExpr");
        if (value instanceof NeExpr) list.add("NeExpr");
        if (value instanceof NegExpr) list.add("NegExpr");
        if (value instanceof NewArrayExpr) list.add("NewArrayExpr");
        if (value instanceof NewExpr) list.add("NewExpr");
        if (value instanceof NewInvokeExpr) list.add("NewInvokeExpr");
        if (value instanceof NewMultiArrayExpr) list.add("NewMultiArrayExpr");
        if (value instanceof OrExpr) list.add("OrExpr");
        if (value instanceof PhiExpr) list.add("PhiExpr");
        if (value instanceof PiExpr) list.add("PiExpr");
        if (value instanceof Ref) list.add("Ref");
        if (value instanceof RemExpr) list.add("RemExpr");
        if (value instanceof ShimpleExpr) list.add("ShimpleExpr");
        if (value instanceof ShlExpr) list.add("ShlExpr");
        if (value instanceof ShrExpr) list.add("ShrExpr");
        if (value instanceof SpecialInvokeExpr) list.add("SpecialInvokeExpr");
        if (value instanceof StaticInvokeExpr) list.add("StaticInvokeExpr");
        if (value instanceof SubExpr) list.add("SubExpr");
        if (value instanceof UnopExpr) list.add("UnopExpr");
        if (value instanceof UshrExpr) list.add("UshrExpr");
        if (value instanceof VirtualInvokeExpr) list.add("VirtualInvokeExpr");
        if (value instanceof XorExpr) list.add("XorExpr");
        return list;
    }
}
